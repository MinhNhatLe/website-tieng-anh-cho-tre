@model EnglishForKids_LMN.Models.Google
@{ ViewBag.Title = "Identify AI - English For Kids";
    Layout = "~/Views/Shared/_Layout.cshtml";
    if (Session["ID_User"] == null && Session["Admin_Code"] == null)
    {
        Response.Redirect("~/Login/SignIn");
    }
}
<style>
    .background_identify {
        margin-top: 50px;
        margin-bottom: 50px;
        padding: 30px;
        background-color: azure;
        border-radius: 20px;
    }

    .btn-open {
        color: #fff;
        box-shadow: 0 1px 1px rgb(0 0 0 / 9%);
        font-size: 20px;
        width: 400px;
        height: 60px;
        cursor: pointer;
        border-radius: 10px;
        outline-style: inherit;
        outline-color: aqua;
        margin-top: 20px;
        margin-bottom: 20px;
        border: 3px solid #315cfd;
        transition: all 0.3s;
        font-weight: 700;
        background: #4FD1C5;
        background: linear-gradient(90deg, rgb(210 205 113) 0%, rgb(223 52 93) 100%);
    }

        .btn-open:hover {
            color: #fff;
            transform: translateY(-6px);
            font-size: 18px;
        }
</style>
<div class="container">
    <div class="row">
        <div class="col-lg-12 col-sm-12 col-xs-12" style="position:relative;">
            <img src="~/Content/images/gif/spyro-the-dragon-purple-dragon.gif" alt="results" style="width:20%; position: absolute; left: -270px; top: 50px" />
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-sm-12 col-xs-12">
            @*<h2 style="text-align: center; font-size: 30px; font-weight: 600;">DỊCH THUẬT</h2>*@

            <div class="border-title">
                <div class="container_title">
                    <h2 class="title" style="font-size: 44px;">
                        <span class="title-word title-word-1">I</span>
                        <span class="title-word title-word-2">D</span>
                        <span class="title-word title-word-3">E</span>
                        <span class="title-word title-word-4">N</span>
                        <span class="title-word title-word-1">T</span>
                        <span class="title-word title-word-2">I</span>
                        <span class="title-word title-word-3">F</span>
                        <span class="title-word title-word-4">Y</span>
                    </h2>
                </div>
            </div>



        </div>
    </div>
    <div class="row background_identify">
        <div class="row">
            <div class="col-lg-12 col-sm-12 col-xs-12">
                <h3 class="animate-charcter center-block text-center">
                    Identify objects in English
                </h3>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-2 col-sm-2 col-xs-0">

            </div>
            <div class="col-lg-8 col-sm-8 col-xs-12">
                <button class="center-block text-center btn-open bx-flashing-hover" type="button" onclick="init()">Open camera</button>
                <div id="webcam-container" class="center-block text-center"></div>
                <div id="label-container" class="text-center"></div>












                <script src="https://code.responsivevoice.org/responsivevoice.js?key=btB4f6uk"></script>
                <script src="~/Scripts/tensorflow.js"></script>
                <script src="~/Scripts/teachablemachine.js"></script>
                <script type="text/javascript">
                    // More API functions here:
                    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

                    // the link to your model provided by Teachable Machine export panel
                    const URL = "https://teachablemachine.withgoogle.com/models/iwncUn3Qg/";

                    let model, webcam, labelContainer, maxPredictions;
                    let lastLabel = ''

                    // Load the image model and setup the webcam
                    async function init() {
                        const modelURL = URL + "model.json";
                        const metadataURL = URL + "metadata.json";

                        // load the model and metadata
                        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
                        // or files from your local hard drive
                        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
                        model = await tmImage.load(modelURL, metadataURL);
                        maxPredictions = model.getTotalClasses();

                        // Convenience function to setup a webcam
                        const flip = true; // whether to flip the webcam
                        webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
                        await webcam.setup(); // request access to the webcam
                        await webcam.play();
                        window.requestAnimationFrame(loop);

                        // append elements to the DOM
                        document.getElementById("webcam-container").appendChild(webcam.canvas);
                        labelContainer = document.getElementById("label-constainer");
                    }

                    async function loop() {
                        webcam.update(); // update the webcam frame
                        await predict();
                        window.requestAnimationFrame(loop);
                    }

                    // run the webcam image through the image model
                    async function predict() {
                        // predict can take in an image, video or canvas html element
                        const predictions = await model.predictTopK(webcam.canvas);

                        const label = predictions[0].className;
                        if (label !== lastLabel) {
                            lastLabel = label;
                            responsiveVoice.speak(label, "UK English Male")
                            labelContainer.innerText = predictions[0].className;
                        }
                    }
                </script>
            </div>
            <div class="col-lg-2 col-sm-2 col-xs-0">

            </div>
        </div>
    </div>
</div>

